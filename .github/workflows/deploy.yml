---
name: Deploy to Production

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run at midnight every day

# Add permissions needed for GitHub token
permissions:
  contents: read
  pull-requests: write
  deployments: write
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          cd frontend
          npm install
          
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
          
      - name: Deploy to Netlify
        run: |
          cd frontend
          npx netlify-cli deploy --prod
          
      - name: Send Telegram Notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"chat_id": "@buzz2remote", "text": "ðŸš€ Deployment Update\nPlatform: GitHub\nStatus: âœ… Success\nDetails: Frontend deployed successfully"}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
          
      # Deploy to Render using webhook
      - name: Deploy to Render via webhook
        id: render-deploy
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          DEPLOY_STATUS="skipped"
          
          if [ -n "$RENDER_DEPLOY_HOOK_URL" ]; then
            echo "Deploying to Render via webhook..."
            if curl -X POST "$RENDER_DEPLOY_HOOK_URL" -f; then
              echo "Render webhook deployment triggered successfully"
              DEPLOY_STATUS="success"
            else
              echo "Render webhook deployment failed"
              DEPLOY_STATUS="failed"
            fi
          elif [ -n "$RENDER_SERVICE_ID" ] && [ -n "$RENDER_API_KEY" ]; then
            echo "Deploying to Render via API..."
            if curl -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              -f \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"; then
              echo "Render API deployment triggered successfully"
              DEPLOY_STATUS="success"
            else
              echo "Render API deployment failed"
              DEPLOY_STATUS="failed"
            fi
          else
            echo "No Render deployment configuration found. Skipping Render deployment."
          fi
          
          echo "deploy_status=${DEPLOY_STATUS}" >> "$GITHUB_OUTPUT"
        continue-on-error: true
        
      # Send deployment notification to backend
      - name: Send deployment notification
        if: always()
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
          
          # Use the status from the Render deployment step or "failed" if the workflow fails
          DEPLOY_STATUS="${{ steps.render-deploy.outputs.deploy_status || 'failed' }}"
          
          echo "Sending deployment notification to backend..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"environment\": \"production\",
              \"status\": \"${DEPLOY_STATUS}\",
              \"commit\": \"${COMMIT_HASH}\",
              \"message\": \"${COMMIT_MSG}\",
              \"timestamp\": \"${TIMESTAMP}\"
            }" \
            "$BACKEND_URL/notification/deployment" || \
            echo "Failed to send deployment notification"
        continue-on-error: true
        
      # Send deployment notification to Telegram
      - name: Send deployment notification to Telegram
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
          
          # Use the status from the Render deployment step or "failed" if the workflow fails
          DEPLOY_STATUS="${{ steps.render-deploy.outputs.deploy_status || 'failed' }}"
          
          echo "Sending deployment notification to Telegram..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"@JobsOfTheBot\",
              \"text\": \"Deployment Status: ${DEPLOY_STATUS}\nCommit: ${COMMIT_HASH}\nMessage: ${COMMIT_MSG}\nTimestamp: ${TIMESTAMP}\"
            }" \
            "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" || \
            echo "Failed to send deployment notification to Telegram"
        continue-on-error: true 